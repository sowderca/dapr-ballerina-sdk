import ballerina/grpc;
import ballerina/protobuf;
import ballerina/protobuf.types.'any;
import ballerina/protobuf.types.empty;
import ballerina/time;

public const string
public const map<string> DAPR_DESCRIPTOR_MAP = {"dapr/proto/common/v1/common.proto": DAPR_PROTO_COMMON_V1_COMMON_DESC};

public isolated client class DaprClient {
    *grpc:AbstractClientEndpoint;

    private final grpc:Client grpcClient;

    public isolated function init(string url, *grpc:ClientConfiguration config) returns grpc:Error? {
        self.grpcClient = check new (url, config);
        check self.grpcClient.initStub(self, DAPR_DESC, DAPR_DESCRIPTOR_MAP);
    }

    isolated remote function InvokeService(InvokeServiceRequest|ContextInvokeServiceRequest req) returns InvokeResponse|grpc:Error {
        map<string|string[]> headers = {};
        InvokeServiceRequest message;
        if req is ContextInvokeServiceRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/InvokeService", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <InvokeResponse>result;
    }

    isolated remote function InvokeServiceContext(InvokeServiceRequest|ContextInvokeServiceRequest req) returns ContextInvokeResponse|grpc:Error {
        map<string|string[]> headers = {};
        InvokeServiceRequest message;
        if req is ContextInvokeServiceRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/InvokeService", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <InvokeResponse>result, headers: respHeaders};
    }

    isolated remote function GetState(GetStateRequest|ContextGetStateRequest req) returns GetStateResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetStateRequest message;
        if req is ContextGetStateRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetState", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <GetStateResponse>result;
    }

    isolated remote function GetStateContext(GetStateRequest|ContextGetStateRequest req) returns ContextGetStateResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetStateRequest message;
        if req is ContextGetStateRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetState", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <GetStateResponse>result, headers: respHeaders};
    }

    isolated remote function GetBulkState(GetBulkStateRequest|ContextGetBulkStateRequest req) returns GetBulkStateResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetBulkStateRequest message;
        if req is ContextGetBulkStateRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetBulkState", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <GetBulkStateResponse>result;
    }

    isolated remote function GetBulkStateContext(GetBulkStateRequest|ContextGetBulkStateRequest req) returns ContextGetBulkStateResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetBulkStateRequest message;
        if req is ContextGetBulkStateRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetBulkState", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <GetBulkStateResponse>result, headers: respHeaders};
    }

    isolated remote function SaveState(SaveStateRequest|ContextSaveStateRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        SaveStateRequest message;
        if req is ContextSaveStateRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SaveState", message, headers);
    }

    isolated remote function SaveStateContext(SaveStateRequest|ContextSaveStateRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        SaveStateRequest message;
        if req is ContextSaveStateRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SaveState", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function QueryStateAlpha1(QueryStateRequest|ContextQueryStateRequest req) returns QueryStateResponse|grpc:Error {
        map<string|string[]> headers = {};
        QueryStateRequest message;
        if req is ContextQueryStateRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/QueryStateAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <QueryStateResponse>result;
    }

    isolated remote function QueryStateAlpha1Context(QueryStateRequest|ContextQueryStateRequest req) returns ContextQueryStateResponse|grpc:Error {
        map<string|string[]> headers = {};
        QueryStateRequest message;
        if req is ContextQueryStateRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/QueryStateAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <QueryStateResponse>result, headers: respHeaders};
    }

    isolated remote function DeleteState(DeleteStateRequest|ContextDeleteStateRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        DeleteStateRequest message;
        if req is ContextDeleteStateRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/DeleteState", message, headers);
    }

    isolated remote function DeleteStateContext(DeleteStateRequest|ContextDeleteStateRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        DeleteStateRequest message;
        if req is ContextDeleteStateRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/DeleteState", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function DeleteBulkState(DeleteBulkStateRequest|ContextDeleteBulkStateRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        DeleteBulkStateRequest message;
        if req is ContextDeleteBulkStateRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/DeleteBulkState", message, headers);
    }

    isolated remote function DeleteBulkStateContext(DeleteBulkStateRequest|ContextDeleteBulkStateRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        DeleteBulkStateRequest message;
        if req is ContextDeleteBulkStateRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/DeleteBulkState", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function ExecuteStateTransaction(ExecuteStateTransactionRequest|ContextExecuteStateTransactionRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        ExecuteStateTransactionRequest message;
        if req is ContextExecuteStateTransactionRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/ExecuteStateTransaction", message, headers);
    }

    isolated remote function ExecuteStateTransactionContext(ExecuteStateTransactionRequest|ContextExecuteStateTransactionRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        ExecuteStateTransactionRequest message;
        if req is ContextExecuteStateTransactionRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/ExecuteStateTransaction", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function PublishEvent(PublishEventRequest|ContextPublishEventRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        PublishEventRequest message;
        if req is ContextPublishEventRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/PublishEvent", message, headers);
    }

    isolated remote function PublishEventContext(PublishEventRequest|ContextPublishEventRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        PublishEventRequest message;
        if req is ContextPublishEventRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/PublishEvent", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function BulkPublishEventAlpha1(BulkPublishRequest|ContextBulkPublishRequest req) returns BulkPublishResponse|grpc:Error {
        map<string|string[]> headers = {};
        BulkPublishRequest message;
        if req is ContextBulkPublishRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/BulkPublishEventAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <BulkPublishResponse>result;
    }

    isolated remote function BulkPublishEventAlpha1Context(BulkPublishRequest|ContextBulkPublishRequest req) returns ContextBulkPublishResponse|grpc:Error {
        map<string|string[]> headers = {};
        BulkPublishRequest message;
        if req is ContextBulkPublishRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/BulkPublishEventAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <BulkPublishResponse>result, headers: respHeaders};
    }

    isolated remote function InvokeBinding(InvokeBindingRequest|ContextInvokeBindingRequest req) returns InvokeBindingResponse|grpc:Error {
        map<string|string[]> headers = {};
        InvokeBindingRequest message;
        if req is ContextInvokeBindingRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/InvokeBinding", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <InvokeBindingResponse>result;
    }

    isolated remote function InvokeBindingContext(InvokeBindingRequest|ContextInvokeBindingRequest req) returns ContextInvokeBindingResponse|grpc:Error {
        map<string|string[]> headers = {};
        InvokeBindingRequest message;
        if req is ContextInvokeBindingRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/InvokeBinding", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <InvokeBindingResponse>result, headers: respHeaders};
    }

    isolated remote function GetSecret(GetSecretRequest|ContextGetSecretRequest req) returns GetSecretResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetSecretRequest message;
        if req is ContextGetSecretRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetSecret", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <GetSecretResponse>result;
    }

    isolated remote function GetSecretContext(GetSecretRequest|ContextGetSecretRequest req) returns ContextGetSecretResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetSecretRequest message;
        if req is ContextGetSecretRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetSecret", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <GetSecretResponse>result, headers: respHeaders};
    }

    isolated remote function GetBulkSecret(GetBulkSecretRequest|ContextGetBulkSecretRequest req) returns GetBulkSecretResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetBulkSecretRequest message;
        if req is ContextGetBulkSecretRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetBulkSecret", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <GetBulkSecretResponse>result;
    }

    isolated remote function GetBulkSecretContext(GetBulkSecretRequest|ContextGetBulkSecretRequest req) returns ContextGetBulkSecretResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetBulkSecretRequest message;
        if req is ContextGetBulkSecretRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetBulkSecret", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <GetBulkSecretResponse>result, headers: respHeaders};
    }

    isolated remote function RegisterActorTimer(RegisterActorTimerRequest|ContextRegisterActorTimerRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        RegisterActorTimerRequest message;
        if req is ContextRegisterActorTimerRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/RegisterActorTimer", message, headers);
    }

    isolated remote function RegisterActorTimerContext(RegisterActorTimerRequest|ContextRegisterActorTimerRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        RegisterActorTimerRequest message;
        if req is ContextRegisterActorTimerRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/RegisterActorTimer", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function UnregisterActorTimer(UnregisterActorTimerRequest|ContextUnregisterActorTimerRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        UnregisterActorTimerRequest message;
        if req is ContextUnregisterActorTimerRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/UnregisterActorTimer", message, headers);
    }

    isolated remote function UnregisterActorTimerContext(UnregisterActorTimerRequest|ContextUnregisterActorTimerRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        UnregisterActorTimerRequest message;
        if req is ContextUnregisterActorTimerRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/UnregisterActorTimer", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function RegisterActorReminder(RegisterActorReminderRequest|ContextRegisterActorReminderRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        RegisterActorReminderRequest message;
        if req is ContextRegisterActorReminderRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/RegisterActorReminder", message, headers);
    }

    isolated remote function RegisterActorReminderContext(RegisterActorReminderRequest|ContextRegisterActorReminderRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        RegisterActorReminderRequest message;
        if req is ContextRegisterActorReminderRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/RegisterActorReminder", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function UnregisterActorReminder(UnregisterActorReminderRequest|ContextUnregisterActorReminderRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        UnregisterActorReminderRequest message;
        if req is ContextUnregisterActorReminderRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/UnregisterActorReminder", message, headers);
    }

    isolated remote function UnregisterActorReminderContext(UnregisterActorReminderRequest|ContextUnregisterActorReminderRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        UnregisterActorReminderRequest message;
        if req is ContextUnregisterActorReminderRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/UnregisterActorReminder", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function GetActorState(GetActorStateRequest|ContextGetActorStateRequest req) returns GetActorStateResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetActorStateRequest message;
        if req is ContextGetActorStateRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetActorState", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <GetActorStateResponse>result;
    }

    isolated remote function GetActorStateContext(GetActorStateRequest|ContextGetActorStateRequest req) returns ContextGetActorStateResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetActorStateRequest message;
        if req is ContextGetActorStateRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetActorState", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <GetActorStateResponse>result, headers: respHeaders};
    }

    isolated remote function ExecuteActorStateTransaction(ExecuteActorStateTransactionRequest|ContextExecuteActorStateTransactionRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        ExecuteActorStateTransactionRequest message;
        if req is ContextExecuteActorStateTransactionRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/ExecuteActorStateTransaction", message, headers);
    }

    isolated remote function ExecuteActorStateTransactionContext(ExecuteActorStateTransactionRequest|ContextExecuteActorStateTransactionRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        ExecuteActorStateTransactionRequest message;
        if req is ContextExecuteActorStateTransactionRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/ExecuteActorStateTransaction", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function InvokeActor(InvokeActorRequest|ContextInvokeActorRequest req) returns InvokeActorResponse|grpc:Error {
        map<string|string[]> headers = {};
        InvokeActorRequest message;
        if req is ContextInvokeActorRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/InvokeActor", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <InvokeActorResponse>result;
    }

    isolated remote function InvokeActorContext(InvokeActorRequest|ContextInvokeActorRequest req) returns ContextInvokeActorResponse|grpc:Error {
        map<string|string[]> headers = {};
        InvokeActorRequest message;
        if req is ContextInvokeActorRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/InvokeActor", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <InvokeActorResponse>result, headers: respHeaders};
    }

    isolated remote function GetConfigurationAlpha1(GetConfigurationRequest|ContextGetConfigurationRequest req) returns GetConfigurationResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetConfigurationRequest message;
        if req is ContextGetConfigurationRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetConfigurationAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <GetConfigurationResponse>result;
    }

    isolated remote function GetConfigurationAlpha1Context(GetConfigurationRequest|ContextGetConfigurationRequest req) returns ContextGetConfigurationResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetConfigurationRequest message;
        if req is ContextGetConfigurationRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetConfigurationAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <GetConfigurationResponse>result, headers: respHeaders};
    }

    isolated remote function GetConfiguration(GetConfigurationRequest|ContextGetConfigurationRequest req) returns GetConfigurationResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetConfigurationRequest message;
        if req is ContextGetConfigurationRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetConfiguration", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <GetConfigurationResponse>result;
    }

    isolated remote function GetConfigurationContext(GetConfigurationRequest|ContextGetConfigurationRequest req) returns ContextGetConfigurationResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetConfigurationRequest message;
        if req is ContextGetConfigurationRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetConfiguration", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <GetConfigurationResponse>result, headers: respHeaders};
    }

    isolated remote function UnsubscribeConfigurationAlpha1(UnsubscribeConfigurationRequest|ContextUnsubscribeConfigurationRequest req) returns UnsubscribeConfigurationResponse|grpc:Error {
        map<string|string[]> headers = {};
        UnsubscribeConfigurationRequest message;
        if req is ContextUnsubscribeConfigurationRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/UnsubscribeConfigurationAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <UnsubscribeConfigurationResponse>result;
    }

    isolated remote function UnsubscribeConfigurationAlpha1Context(UnsubscribeConfigurationRequest|ContextUnsubscribeConfigurationRequest req) returns ContextUnsubscribeConfigurationResponse|grpc:Error {
        map<string|string[]> headers = {};
        UnsubscribeConfigurationRequest message;
        if req is ContextUnsubscribeConfigurationRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/UnsubscribeConfigurationAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <UnsubscribeConfigurationResponse>result, headers: respHeaders};
    }

    isolated remote function UnsubscribeConfiguration(UnsubscribeConfigurationRequest|ContextUnsubscribeConfigurationRequest req) returns UnsubscribeConfigurationResponse|grpc:Error {
        map<string|string[]> headers = {};
        UnsubscribeConfigurationRequest message;
        if req is ContextUnsubscribeConfigurationRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/UnsubscribeConfiguration", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <UnsubscribeConfigurationResponse>result;
    }

    isolated remote function UnsubscribeConfigurationContext(UnsubscribeConfigurationRequest|ContextUnsubscribeConfigurationRequest req) returns ContextUnsubscribeConfigurationResponse|grpc:Error {
        map<string|string[]> headers = {};
        UnsubscribeConfigurationRequest message;
        if req is ContextUnsubscribeConfigurationRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/UnsubscribeConfiguration", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <UnsubscribeConfigurationResponse>result, headers: respHeaders};
    }

    isolated remote function TryLockAlpha1(TryLockRequest|ContextTryLockRequest req) returns TryLockResponse|grpc:Error {
        map<string|string[]> headers = {};
        TryLockRequest message;
        if req is ContextTryLockRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/TryLockAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <TryLockResponse>result;
    }

    isolated remote function TryLockAlpha1Context(TryLockRequest|ContextTryLockRequest req) returns ContextTryLockResponse|grpc:Error {
        map<string|string[]> headers = {};
        TryLockRequest message;
        if req is ContextTryLockRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/TryLockAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <TryLockResponse>result, headers: respHeaders};
    }

    isolated remote function UnlockAlpha1(UnlockRequest|ContextUnlockRequest req) returns UnlockResponse|grpc:Error {
        map<string|string[]> headers = {};
        UnlockRequest message;
        if req is ContextUnlockRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/UnlockAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <UnlockResponse>result;
    }

    isolated remote function UnlockAlpha1Context(UnlockRequest|ContextUnlockRequest req) returns ContextUnlockResponse|grpc:Error {
        map<string|string[]> headers = {};
        UnlockRequest message;
        if req is ContextUnlockRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/UnlockAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <UnlockResponse>result, headers: respHeaders};
    }

    isolated remote function GetMetadata() returns GetMetadataResponse|grpc:Error {
        empty:Empty message = {};
        map<string|string[]> headers = {};
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetMetadata", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <GetMetadataResponse>result;
    }

    isolated remote function GetMetadataContext() returns ContextGetMetadataResponse|grpc:Error {
        empty:Empty message = {};
        map<string|string[]> headers = {};
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetMetadata", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <GetMetadataResponse>result, headers: respHeaders};
    }

    isolated remote function SetMetadata(SetMetadataRequest|ContextSetMetadataRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        SetMetadataRequest message;
        if req is ContextSetMetadataRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SetMetadata", message, headers);
    }

    isolated remote function SetMetadataContext(SetMetadataRequest|ContextSetMetadataRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        SetMetadataRequest message;
        if req is ContextSetMetadataRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SetMetadata", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function SubtleGetKeyAlpha1(SubtleGetKeyRequest|ContextSubtleGetKeyRequest req) returns SubtleGetKeyResponse|grpc:Error {
        map<string|string[]> headers = {};
        SubtleGetKeyRequest message;
        if req is ContextSubtleGetKeyRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SubtleGetKeyAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <SubtleGetKeyResponse>result;
    }

    isolated remote function SubtleGetKeyAlpha1Context(SubtleGetKeyRequest|ContextSubtleGetKeyRequest req) returns ContextSubtleGetKeyResponse|grpc:Error {
        map<string|string[]> headers = {};
        SubtleGetKeyRequest message;
        if req is ContextSubtleGetKeyRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SubtleGetKeyAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <SubtleGetKeyResponse>result, headers: respHeaders};
    }

    isolated remote function SubtleEncryptAlpha1(SubtleEncryptRequest|ContextSubtleEncryptRequest req) returns SubtleEncryptResponse|grpc:Error {
        map<string|string[]> headers = {};
        SubtleEncryptRequest message;
        if req is ContextSubtleEncryptRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SubtleEncryptAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <SubtleEncryptResponse>result;
    }

    isolated remote function SubtleEncryptAlpha1Context(SubtleEncryptRequest|ContextSubtleEncryptRequest req) returns ContextSubtleEncryptResponse|grpc:Error {
        map<string|string[]> headers = {};
        SubtleEncryptRequest message;
        if req is ContextSubtleEncryptRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SubtleEncryptAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <SubtleEncryptResponse>result, headers: respHeaders};
    }

    isolated remote function SubtleDecryptAlpha1(SubtleDecryptRequest|ContextSubtleDecryptRequest req) returns SubtleDecryptResponse|grpc:Error {
        map<string|string[]> headers = {};
        SubtleDecryptRequest message;
        if req is ContextSubtleDecryptRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SubtleDecryptAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <SubtleDecryptResponse>result;
    }

    isolated remote function SubtleDecryptAlpha1Context(SubtleDecryptRequest|ContextSubtleDecryptRequest req) returns ContextSubtleDecryptResponse|grpc:Error {
        map<string|string[]> headers = {};
        SubtleDecryptRequest message;
        if req is ContextSubtleDecryptRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SubtleDecryptAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <SubtleDecryptResponse>result, headers: respHeaders};
    }

    isolated remote function SubtleWrapKeyAlpha1(SubtleWrapKeyRequest|ContextSubtleWrapKeyRequest req) returns SubtleWrapKeyResponse|grpc:Error {
        map<string|string[]> headers = {};
        SubtleWrapKeyRequest message;
        if req is ContextSubtleWrapKeyRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SubtleWrapKeyAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <SubtleWrapKeyResponse>result;
    }

    isolated remote function SubtleWrapKeyAlpha1Context(SubtleWrapKeyRequest|ContextSubtleWrapKeyRequest req) returns ContextSubtleWrapKeyResponse|grpc:Error {
        map<string|string[]> headers = {};
        SubtleWrapKeyRequest message;
        if req is ContextSubtleWrapKeyRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SubtleWrapKeyAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <SubtleWrapKeyResponse>result, headers: respHeaders};
    }

    isolated remote function SubtleUnwrapKeyAlpha1(SubtleUnwrapKeyRequest|ContextSubtleUnwrapKeyRequest req) returns SubtleUnwrapKeyResponse|grpc:Error {
        map<string|string[]> headers = {};
        SubtleUnwrapKeyRequest message;
        if req is ContextSubtleUnwrapKeyRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SubtleUnwrapKeyAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <SubtleUnwrapKeyResponse>result;
    }

    isolated remote function SubtleUnwrapKeyAlpha1Context(SubtleUnwrapKeyRequest|ContextSubtleUnwrapKeyRequest req) returns ContextSubtleUnwrapKeyResponse|grpc:Error {
        map<string|string[]> headers = {};
        SubtleUnwrapKeyRequest message;
        if req is ContextSubtleUnwrapKeyRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SubtleUnwrapKeyAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <SubtleUnwrapKeyResponse>result, headers: respHeaders};
    }

    isolated remote function SubtleSignAlpha1(SubtleSignRequest|ContextSubtleSignRequest req) returns SubtleSignResponse|grpc:Error {
        map<string|string[]> headers = {};
        SubtleSignRequest message;
        if req is ContextSubtleSignRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SubtleSignAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <SubtleSignResponse>result;
    }

    isolated remote function SubtleSignAlpha1Context(SubtleSignRequest|ContextSubtleSignRequest req) returns ContextSubtleSignResponse|grpc:Error {
        map<string|string[]> headers = {};
        SubtleSignRequest message;
        if req is ContextSubtleSignRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SubtleSignAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <SubtleSignResponse>result, headers: respHeaders};
    }

    isolated remote function SubtleVerifyAlpha1(SubtleVerifyRequest|ContextSubtleVerifyRequest req) returns SubtleVerifyResponse|grpc:Error {
        map<string|string[]> headers = {};
        SubtleVerifyRequest message;
        if req is ContextSubtleVerifyRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SubtleVerifyAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <SubtleVerifyResponse>result;
    }

    isolated remote function SubtleVerifyAlpha1Context(SubtleVerifyRequest|ContextSubtleVerifyRequest req) returns ContextSubtleVerifyResponse|grpc:Error {
        map<string|string[]> headers = {};
        SubtleVerifyRequest message;
        if req is ContextSubtleVerifyRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/SubtleVerifyAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <SubtleVerifyResponse>result, headers: respHeaders};
    }

    isolated remote function StartWorkflowAlpha1(StartWorkflowRequest|ContextStartWorkflowRequest req) returns StartWorkflowResponse|grpc:Error {
        map<string|string[]> headers = {};
        StartWorkflowRequest message;
        if req is ContextStartWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/StartWorkflowAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <StartWorkflowResponse>result;
    }

    isolated remote function StartWorkflowAlpha1Context(StartWorkflowRequest|ContextStartWorkflowRequest req) returns ContextStartWorkflowResponse|grpc:Error {
        map<string|string[]> headers = {};
        StartWorkflowRequest message;
        if req is ContextStartWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/StartWorkflowAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <StartWorkflowResponse>result, headers: respHeaders};
    }

    isolated remote function GetWorkflowAlpha1(GetWorkflowRequest|ContextGetWorkflowRequest req) returns GetWorkflowResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetWorkflowRequest message;
        if req is ContextGetWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetWorkflowAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <GetWorkflowResponse>result;
    }

    isolated remote function GetWorkflowAlpha1Context(GetWorkflowRequest|ContextGetWorkflowRequest req) returns ContextGetWorkflowResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetWorkflowRequest message;
        if req is ContextGetWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetWorkflowAlpha1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <GetWorkflowResponse>result, headers: respHeaders};
    }

    isolated remote function PurgeWorkflowAlpha1(PurgeWorkflowRequest|ContextPurgeWorkflowRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        PurgeWorkflowRequest message;
        if req is ContextPurgeWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/PurgeWorkflowAlpha1", message, headers);
    }

    isolated remote function PurgeWorkflowAlpha1Context(PurgeWorkflowRequest|ContextPurgeWorkflowRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        PurgeWorkflowRequest message;
        if req is ContextPurgeWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/PurgeWorkflowAlpha1", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function TerminateWorkflowAlpha1(TerminateWorkflowRequest|ContextTerminateWorkflowRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        TerminateWorkflowRequest message;
        if req is ContextTerminateWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/TerminateWorkflowAlpha1", message, headers);
    }

    isolated remote function TerminateWorkflowAlpha1Context(TerminateWorkflowRequest|ContextTerminateWorkflowRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        TerminateWorkflowRequest message;
        if req is ContextTerminateWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/TerminateWorkflowAlpha1", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function PauseWorkflowAlpha1(PauseWorkflowRequest|ContextPauseWorkflowRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        PauseWorkflowRequest message;
        if req is ContextPauseWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/PauseWorkflowAlpha1", message, headers);
    }

    isolated remote function PauseWorkflowAlpha1Context(PauseWorkflowRequest|ContextPauseWorkflowRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        PauseWorkflowRequest message;
        if req is ContextPauseWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/PauseWorkflowAlpha1", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function ResumeWorkflowAlpha1(ResumeWorkflowRequest|ContextResumeWorkflowRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        ResumeWorkflowRequest message;
        if req is ContextResumeWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/ResumeWorkflowAlpha1", message, headers);
    }

    isolated remote function ResumeWorkflowAlpha1Context(ResumeWorkflowRequest|ContextResumeWorkflowRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        ResumeWorkflowRequest message;
        if req is ContextResumeWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/ResumeWorkflowAlpha1", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function RaiseEventWorkflowAlpha1(RaiseEventWorkflowRequest|ContextRaiseEventWorkflowRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        RaiseEventWorkflowRequest message;
        if req is ContextRaiseEventWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/RaiseEventWorkflowAlpha1", message, headers);
    }

    isolated remote function RaiseEventWorkflowAlpha1Context(RaiseEventWorkflowRequest|ContextRaiseEventWorkflowRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        RaiseEventWorkflowRequest message;
        if req is ContextRaiseEventWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/RaiseEventWorkflowAlpha1", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function StartWorkflowBeta1(StartWorkflowRequest|ContextStartWorkflowRequest req) returns StartWorkflowResponse|grpc:Error {
        map<string|string[]> headers = {};
        StartWorkflowRequest message;
        if req is ContextStartWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/StartWorkflowBeta1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <StartWorkflowResponse>result;
    }

    isolated remote function StartWorkflowBeta1Context(StartWorkflowRequest|ContextStartWorkflowRequest req) returns ContextStartWorkflowResponse|grpc:Error {
        map<string|string[]> headers = {};
        StartWorkflowRequest message;
        if req is ContextStartWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/StartWorkflowBeta1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <StartWorkflowResponse>result, headers: respHeaders};
    }

    isolated remote function GetWorkflowBeta1(GetWorkflowRequest|ContextGetWorkflowRequest req) returns GetWorkflowResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetWorkflowRequest message;
        if req is ContextGetWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetWorkflowBeta1", message, headers);
        [anydata, map<string|string[]>] [result, _] = payload;
        return <GetWorkflowResponse>result;
    }

    isolated remote function GetWorkflowBeta1Context(GetWorkflowRequest|ContextGetWorkflowRequest req) returns ContextGetWorkflowResponse|grpc:Error {
        map<string|string[]> headers = {};
        GetWorkflowRequest message;
        if req is ContextGetWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/GetWorkflowBeta1", message, headers);
        [anydata, map<string|string[]>] [result, respHeaders] = payload;
        return {content: <GetWorkflowResponse>result, headers: respHeaders};
    }

    isolated remote function PurgeWorkflowBeta1(PurgeWorkflowRequest|ContextPurgeWorkflowRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        PurgeWorkflowRequest message;
        if req is ContextPurgeWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/PurgeWorkflowBeta1", message, headers);
    }

    isolated remote function PurgeWorkflowBeta1Context(PurgeWorkflowRequest|ContextPurgeWorkflowRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        PurgeWorkflowRequest message;
        if req is ContextPurgeWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/PurgeWorkflowBeta1", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function TerminateWorkflowBeta1(TerminateWorkflowRequest|ContextTerminateWorkflowRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        TerminateWorkflowRequest message;
        if req is ContextTerminateWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/TerminateWorkflowBeta1", message, headers);
    }

    isolated remote function TerminateWorkflowBeta1Context(TerminateWorkflowRequest|ContextTerminateWorkflowRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        TerminateWorkflowRequest message;
        if req is ContextTerminateWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/TerminateWorkflowBeta1", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function PauseWorkflowBeta1(PauseWorkflowRequest|ContextPauseWorkflowRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        PauseWorkflowRequest message;
        if req is ContextPauseWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/PauseWorkflowBeta1", message, headers);
    }

    isolated remote function PauseWorkflowBeta1Context(PauseWorkflowRequest|ContextPauseWorkflowRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        PauseWorkflowRequest message;
        if req is ContextPauseWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/PauseWorkflowBeta1", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function ResumeWorkflowBeta1(ResumeWorkflowRequest|ContextResumeWorkflowRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        ResumeWorkflowRequest message;
        if req is ContextResumeWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/ResumeWorkflowBeta1", message, headers);
    }

    isolated remote function ResumeWorkflowBeta1Context(ResumeWorkflowRequest|ContextResumeWorkflowRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        ResumeWorkflowRequest message;
        if req is ContextResumeWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/ResumeWorkflowBeta1", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function RaiseEventWorkflowBeta1(RaiseEventWorkflowRequest|ContextRaiseEventWorkflowRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        RaiseEventWorkflowRequest message;
        if req is ContextRaiseEventWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/RaiseEventWorkflowBeta1", message, headers);
    }

    isolated remote function RaiseEventWorkflowBeta1Context(RaiseEventWorkflowRequest|ContextRaiseEventWorkflowRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        RaiseEventWorkflowRequest message;
        if req is ContextRaiseEventWorkflowRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/RaiseEventWorkflowBeta1", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function Shutdown() returns grpc:Error? {
        empty:Empty message = {};
        map<string|string[]> headers = {};
        _ = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/Shutdown", message, headers);
    }

    isolated remote function ShutdownContext() returns empty:ContextNil|grpc:Error {
        empty:Empty message = {};
        map<string|string[]> headers = {};
        var payload = check self.grpcClient->executeSimpleRPC("dapr.proto.runtime.v1.Dapr/Shutdown", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function SubscribeConfigurationAlpha1(SubscribeConfigurationRequest|ContextSubscribeConfigurationRequest req) returns stream<SubscribeConfigurationResponse, grpc:Error?>|grpc:Error {
        map<string|string[]> headers = {};
        SubscribeConfigurationRequest message;
        if req is ContextSubscribeConfigurationRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeServerStreaming("dapr.proto.runtime.v1.Dapr/SubscribeConfigurationAlpha1", message, headers);
        [stream<anydata, grpc:Error?>, map<string|string[]>] [result, _] = payload;
        SubscribeConfigurationResponseStream outputStream = new SubscribeConfigurationResponseStream(result);
        return new stream<SubscribeConfigurationResponse, grpc:Error?>(outputStream);
    }

    isolated remote function SubscribeConfigurationAlpha1Context(SubscribeConfigurationRequest|ContextSubscribeConfigurationRequest req) returns ContextSubscribeConfigurationResponseStream|grpc:Error {
        map<string|string[]> headers = {};
        SubscribeConfigurationRequest message;
        if req is ContextSubscribeConfigurationRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeServerStreaming("dapr.proto.runtime.v1.Dapr/SubscribeConfigurationAlpha1", message, headers);
        [stream<anydata, grpc:Error?>, map<string|string[]>] [result, respHeaders] = payload;
        SubscribeConfigurationResponseStream outputStream = new SubscribeConfigurationResponseStream(result);
        return {content: new stream<SubscribeConfigurationResponse, grpc:Error?>(outputStream), headers: respHeaders};
    }

    isolated remote function SubscribeConfiguration(SubscribeConfigurationRequest|ContextSubscribeConfigurationRequest req) returns stream<SubscribeConfigurationResponse, grpc:Error?>|grpc:Error {
        map<string|string[]> headers = {};
        SubscribeConfigurationRequest message;
        if req is ContextSubscribeConfigurationRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeServerStreaming("dapr.proto.runtime.v1.Dapr/SubscribeConfiguration", message, headers);
        [stream<anydata, grpc:Error?>, map<string|string[]>] [result, _] = payload;
        SubscribeConfigurationResponseStream outputStream = new SubscribeConfigurationResponseStream(result);
        return new stream<SubscribeConfigurationResponse, grpc:Error?>(outputStream);
    }

    isolated remote function SubscribeConfigurationContext(SubscribeConfigurationRequest|ContextSubscribeConfigurationRequest req) returns ContextSubscribeConfigurationResponseStream|grpc:Error {
        map<string|string[]> headers = {};
        SubscribeConfigurationRequest message;
        if req is ContextSubscribeConfigurationRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeServerStreaming("dapr.proto.runtime.v1.Dapr/SubscribeConfiguration", message, headers);
        [stream<anydata, grpc:Error?>, map<string|string[]>] [result, respHeaders] = payload;
        SubscribeConfigurationResponseStream outputStream = new SubscribeConfigurationResponseStream(result);
        return {content: new stream<SubscribeConfigurationResponse, grpc:Error?>(outputStream), headers: respHeaders};
    }

    isolated remote function EncryptAlpha1() returns EncryptAlpha1StreamingClient|grpc:Error {
        grpc:StreamingClient sClient = check self.grpcClient->executeBidirectionalStreaming("dapr.proto.runtime.v1.Dapr/EncryptAlpha1");
        return new EncryptAlpha1StreamingClient(sClient);
    }

    isolated remote function DecryptAlpha1() returns DecryptAlpha1StreamingClient|grpc:Error {
        grpc:StreamingClient sClient = check self.grpcClient->executeBidirectionalStreaming("dapr.proto.runtime.v1.Dapr/DecryptAlpha1");
        return new DecryptAlpha1StreamingClient(sClient);
    }
}

public class SubscribeConfigurationResponseStream {
    private stream<anydata, grpc:Error?> anydataStream;

    public isolated function init(stream<anydata, grpc:Error?> anydataStream) {
        self.anydataStream = anydataStream;
    }

    public isolated function next() returns record {|SubscribeConfigurationResponse value;|}|grpc:Error? {
        var streamValue = self.anydataStream.next();
        if (streamValue is ()) {
            return streamValue;
        } else if (streamValue is grpc:Error) {
            return streamValue;
        } else {
            record {|SubscribeConfigurationResponse value;|} nextRecord = {value: <SubscribeConfigurationResponse>streamValue.value};
            return nextRecord;
        }
    }

    public isolated function close() returns grpc:Error? {
        return self.anydataStream.close();
    }
}

public client class EncryptAlpha1StreamingClient {
    private grpc:StreamingClient sClient;

    isolated function init(grpc:StreamingClient sClient) {
        self.sClient = sClient;
    }

    isolated remote function sendEncryptRequest(EncryptRequest message) returns grpc:Error? {
        return self.sClient->send(message);
    }

    isolated remote function sendContextEncryptRequest(ContextEncryptRequest message) returns grpc:Error? {
        return self.sClient->send(message);
    }

    isolated remote function receiveEncryptResponse() returns EncryptResponse|grpc:Error? {
        var response = check self.sClient->receive();
        if response is () {
            return response;
        } else {
            [anydata, map<string|string[]>] [payload, _] = response;
            return <EncryptResponse>payload;
        }
    }

    isolated remote function receiveContextEncryptResponse() returns ContextEncryptResponse|grpc:Error? {
        var response = check self.sClient->receive();
        if response is () {
            return response;
        } else {
            [anydata, map<string|string[]>] [payload, headers] = response;
            return {content: <EncryptResponse>payload, headers: headers};
        }
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.sClient->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.sClient->complete();
    }
}

public client class DecryptAlpha1StreamingClient {
    private grpc:StreamingClient sClient;

    isolated function init(grpc:StreamingClient sClient) {
        self.sClient = sClient;
    }

    isolated remote function sendDecryptRequest(DecryptRequest message) returns grpc:Error? {
        return self.sClient->send(message);
    }

    isolated remote function sendContextDecryptRequest(ContextDecryptRequest message) returns grpc:Error? {
        return self.sClient->send(message);
    }

    isolated remote function receiveDecryptResponse() returns DecryptResponse|grpc:Error? {
        var response = check self.sClient->receive();
        if response is () {
            return response;
        } else {
            [anydata, map<string|string[]>] [payload, _] = response;
            return <DecryptResponse>payload;
        }
    }

    isolated remote function receiveContextDecryptResponse() returns ContextDecryptResponse|grpc:Error? {
        var response = check self.sClient->receive();
        if response is () {
            return response;
        } else {
            [anydata, map<string|string[]>] [payload, headers] = response;
            return {content: <DecryptResponse>payload, headers: headers};
        }
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.sClient->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.sClient->complete();
    }
}

public client class DaprDecryptResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendDecryptResponse(DecryptResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextDecryptResponse(ContextDecryptResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprInvokeActorResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendInvokeActorResponse(InvokeActorResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextInvokeActorResponse(ContextInvokeActorResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprSubtleEncryptResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendSubtleEncryptResponse(SubtleEncryptResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextSubtleEncryptResponse(ContextSubtleEncryptResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprUnlockResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendUnlockResponse(UnlockResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextUnlockResponse(ContextUnlockResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprGetStateResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendGetStateResponse(GetStateResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextGetStateResponse(ContextGetStateResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprNilCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprSubtleUnwrapKeyResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendSubtleUnwrapKeyResponse(SubtleUnwrapKeyResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextSubtleUnwrapKeyResponse(ContextSubtleUnwrapKeyResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprTryLockResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendTryLockResponse(TryLockResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextTryLockResponse(ContextTryLockResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprGetWorkflowResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendGetWorkflowResponse(GetWorkflowResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextGetWorkflowResponse(ContextGetWorkflowResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprSubscribeConfigurationResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendSubscribeConfigurationResponse(SubscribeConfigurationResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextSubscribeConfigurationResponse(ContextSubscribeConfigurationResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprEncryptResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendEncryptResponse(EncryptResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextEncryptResponse(ContextEncryptResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprInvokeResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendInvokeResponse(InvokeResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextInvokeResponse(ContextInvokeResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprInvokeBindingResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendInvokeBindingResponse(InvokeBindingResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextInvokeBindingResponse(ContextInvokeBindingResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprQueryStateResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendQueryStateResponse(QueryStateResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextQueryStateResponse(ContextQueryStateResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprSubtleDecryptResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendSubtleDecryptResponse(SubtleDecryptResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextSubtleDecryptResponse(ContextSubtleDecryptResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprSubtleWrapKeyResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendSubtleWrapKeyResponse(SubtleWrapKeyResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextSubtleWrapKeyResponse(ContextSubtleWrapKeyResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprSubtleVerifyResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendSubtleVerifyResponse(SubtleVerifyResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextSubtleVerifyResponse(ContextSubtleVerifyResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprGetConfigurationResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendGetConfigurationResponse(GetConfigurationResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextGetConfigurationResponse(ContextGetConfigurationResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprGetSecretResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendGetSecretResponse(GetSecretResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextGetSecretResponse(ContextGetSecretResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprStartWorkflowResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendStartWorkflowResponse(StartWorkflowResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextStartWorkflowResponse(ContextStartWorkflowResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprGetBulkStateResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendGetBulkStateResponse(GetBulkStateResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextGetBulkStateResponse(ContextGetBulkStateResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprUnsubscribeConfigurationResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendUnsubscribeConfigurationResponse(UnsubscribeConfigurationResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextUnsubscribeConfigurationResponse(ContextUnsubscribeConfigurationResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprGetMetadataResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendGetMetadataResponse(GetMetadataResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextGetMetadataResponse(ContextGetMetadataResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprGetActorStateResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendGetActorStateResponse(GetActorStateResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextGetActorStateResponse(ContextGetActorStateResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprSubtleSignResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendSubtleSignResponse(SubtleSignResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextSubtleSignResponse(ContextSubtleSignResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprGetBulkSecretResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendGetBulkSecretResponse(GetBulkSecretResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextGetBulkSecretResponse(ContextGetBulkSecretResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprBulkPublishResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendBulkPublishResponse(BulkPublishResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextBulkPublishResponse(ContextBulkPublishResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public client class DaprSubtleGetKeyResponseCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendSubtleGetKeyResponse(SubtleGetKeyResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendContextSubtleGetKeyResponse(ContextSubtleGetKeyResponse response) returns grpc:Error? {
        return self.caller->send(response);
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public type ContextDecryptResponseStream record {|
    stream<DecryptResponse, error?> content;
    map<string|string[]> headers;
|};

public type ContextEncryptResponseStream record {|
    stream<EncryptResponse, error?> content;
    map<string|string[]> headers;
|};

public type ContextDecryptRequestStream record {|
    stream<DecryptRequest, error?> content;
    map<string|string[]> headers;
|};

public type ContextSubscribeConfigurationResponseStream record {|
    stream<SubscribeConfigurationResponse, error?> content;
    map<string|string[]> headers;
|};

public type ContextEncryptRequestStream record {|
    stream<EncryptRequest, error?> content;
    map<string|string[]> headers;
|};

public type ContextInvokeBindingResponse record {|
    InvokeBindingResponse content;
    map<string|string[]> headers;
|};

public type ContextGetBulkSecretRequest record {|
    GetBulkSecretRequest content;
    map<string|string[]> headers;
|};

public type ContextGetBulkStateResponse record {|
    GetBulkStateResponse content;
    map<string|string[]> headers;
|};

public type ContextInvokeBindingRequest record {|
    InvokeBindingRequest content;
    map<string|string[]> headers;
|};

public type ContextSubtleVerifyResponse record {|
    SubtleVerifyResponse content;
    map<string|string[]> headers;
|};

public type ContextInvokeServiceRequest record {|
    InvokeServiceRequest content;
    map<string|string[]> headers;
|};

public type ContextGetConfigurationResponse record {|
    GetConfigurationResponse content;
    map<string|string[]> headers;
|};

public type ContextSubtleUnwrapKeyResponse record {|
    SubtleUnwrapKeyResponse content;
    map<string|string[]> headers;
|};

public type ContextSubtleEncryptRequest record {|
    SubtleEncryptRequest content;
    map<string|string[]> headers;
|};

public type ContextUnsubscribeConfigurationResponse record {|
    UnsubscribeConfigurationResponse content;
    map<string|string[]> headers;
|};

public type ContextDecryptResponse record {|
    DecryptResponse content;
    map<string|string[]> headers;
|};

public type ContextSubtleWrapKeyRequest record {|
    SubtleWrapKeyRequest content;
    map<string|string[]> headers;
|};

public type ContextSubtleDecryptResponse record {|
    SubtleDecryptResponse content;
    map<string|string[]> headers;
|};

public type ContextSubtleUnwrapKeyRequest record {|
    SubtleUnwrapKeyRequest content;
    map<string|string[]> headers;
|};

public type ContextQueryStateRequest record {|
    QueryStateRequest content;
    map<string|string[]> headers;
|};

public type ContextInvokeActorResponse record {|
    InvokeActorResponse content;
    map<string|string[]> headers;
|};

public type ContextGetSecretResponse record {|
    GetSecretResponse content;
    map<string|string[]> headers;
|};

public type ContextGetActorStateRequest record {|
    GetActorStateRequest content;
    map<string|string[]> headers;
|};

public type ContextGetStateResponse record {|
    GetStateResponse content;
    map<string|string[]> headers;
|};

public type ContextEncryptResponse record {|
    EncryptResponse content;
    map<string|string[]> headers;
|};

public type ContextSetMetadataRequest record {|
    SetMetadataRequest content;
    map<string|string[]> headers;
|};

public type ContextSubtleEncryptResponse record {|
    SubtleEncryptResponse content;
    map<string|string[]> headers;
|};

public type ContextTryLockRequest record {|
    TryLockRequest content;
    map<string|string[]> headers;
|};

public type ContextSubtleWrapKeyResponse record {|
    SubtleWrapKeyResponse content;
    map<string|string[]> headers;
|};

public type ContextStartWorkflowResponse record {|
    StartWorkflowResponse content;
    map<string|string[]> headers;
|};

public type ContextSubtleSignRequest record {|
    SubtleSignRequest content;
    map<string|string[]> headers;
|};

public type ContextGetBulkStateRequest record {|
    GetBulkStateRequest content;
    map<string|string[]> headers;
|};

public type ContextRaiseEventWorkflowRequest record {|
    RaiseEventWorkflowRequest content;
    map<string|string[]> headers;
|};

public type ContextGetBulkSecretResponse record {|
    GetBulkSecretResponse content;
    map<string|string[]> headers;
|};

public type ContextGetStateRequest record {|
    GetStateRequest content;
    map<string|string[]> headers;
|};

public type ContextSaveStateRequest record {|
    SaveStateRequest content;
    map<string|string[]> headers;
|};

public type ContextBulkPublishResponse record {|
    BulkPublishResponse content;
    map<string|string[]> headers;
|};

public type ContextExecuteActorStateTransactionRequest record {|
    ExecuteActorStateTransactionRequest content;
    map<string|string[]> headers;
|};

public type ContextPublishEventRequest record {|
    PublishEventRequest content;
    map<string|string[]> headers;
|};

public type ContextInvokeActorRequest record {|
    InvokeActorRequest content;
    map<string|string[]> headers;
|};

public type ContextUnregisterActorTimerRequest record {|
    UnregisterActorTimerRequest content;
    map<string|string[]> headers;
|};

public type ContextExecuteStateTransactionRequest record {|
    ExecuteStateTransactionRequest content;
    map<string|string[]> headers;
|};

public type ContextTerminateWorkflowRequest record {|
    TerminateWorkflowRequest content;
    map<string|string[]> headers;
|};

public type ContextDecryptRequest record {|
    DecryptRequest content;
    map<string|string[]> headers;
|};

public type ContextUnsubscribeConfigurationRequest record {|
    UnsubscribeConfigurationRequest content;
    map<string|string[]> headers;
|};

public type ContextSubscribeConfigurationRequest record {|
    SubscribeConfigurationRequest content;
    map<string|string[]> headers;
|};

public type ContextGetConfigurationRequest record {|
    GetConfigurationRequest content;
    map<string|string[]> headers;
|};

public type ContextUnlockRequest record {|
    UnlockRequest content;
    map<string|string[]> headers;
|};

public type ContextStartWorkflowRequest record {|
    StartWorkflowRequest content;
    map<string|string[]> headers;
|};

public type ContextGetMetadataResponse record {|
    GetMetadataResponse content;
    map<string|string[]> headers;
|};

public type ContextDeleteStateRequest record {|
    DeleteStateRequest content;
    map<string|string[]> headers;
|};

public type ContextBulkPublishRequest record {|
    BulkPublishRequest content;
    map<string|string[]> headers;
|};

public type ContextPurgeWorkflowRequest record {|
    PurgeWorkflowRequest content;
    map<string|string[]> headers;
|};

public type ContextUnlockResponse record {|
    UnlockResponse content;
    map<string|string[]> headers;
|};

public type ContextGetWorkflowRequest record {|
    GetWorkflowRequest content;
    map<string|string[]> headers;
|};

public type ContextRegisterActorTimerRequest record {|
    RegisterActorTimerRequest content;
    map<string|string[]> headers;
|};

public type ContextSubscribeConfigurationResponse record {|
    SubscribeConfigurationResponse content;
    map<string|string[]> headers;
|};

public type ContextEncryptRequest record {|
    EncryptRequest content;
    map<string|string[]> headers;
|};

public type ContextGetSecretRequest record {|
    GetSecretRequest content;
    map<string|string[]> headers;
|};

public type ContextPauseWorkflowRequest record {|
    PauseWorkflowRequest content;
    map<string|string[]> headers;
|};

public type ContextSubtleSignResponse record {|
    SubtleSignResponse content;
    map<string|string[]> headers;
|};

public type ContextUnregisterActorReminderRequest record {|
    UnregisterActorReminderRequest content;
    map<string|string[]> headers;
|};

public type ContextSubtleGetKeyResponse record {|
    SubtleGetKeyResponse content;
    map<string|string[]> headers;
|};

public type ContextTryLockResponse record {|
    TryLockResponse content;
    map<string|string[]> headers;
|};

public type ContextSubtleVerifyRequest record {|
    SubtleVerifyRequest content;
    map<string|string[]> headers;
|};

public type ContextSubtleDecryptRequest record {|
    SubtleDecryptRequest content;
    map<string|string[]> headers;
|};

public type ContextQueryStateResponse record {|
    QueryStateResponse content;
    map<string|string[]> headers;
|};

public type ContextRegisterActorReminderRequest record {|
    RegisterActorReminderRequest content;
    map<string|string[]> headers;
|};

public type ContextGetWorkflowResponse record {|
    GetWorkflowResponse content;
    map<string|string[]> headers;
|};

public type ContextDeleteBulkStateRequest record {|
    DeleteBulkStateRequest content;
    map<string|string[]> headers;
|};

public type ContextSubtleGetKeyRequest record {|
    SubtleGetKeyRequest content;
    map<string|string[]> headers;
|};

public type ContextGetActorStateResponse record {|
    GetActorStateResponse content;
    map<string|string[]> headers;
|};

public type ContextResumeWorkflowRequest record {|
    ResumeWorkflowRequest content;
    map<string|string[]> headers;
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SecretResponse record {|
    record {|string key; string value;|}[] secrets = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type InvokeBindingResponse record {|
    byte[] data = [];
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type GetBulkSecretRequest record {|
    string store_name = "";
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type GetBulkStateResponse record {|
    BulkStateItem[] items = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type BulkPublishResponseFailedEntry record {|
    string entry_id = "";
    string 'error = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type InvokeBindingRequest record {|
    string name = "";
    byte[] data = [];
    string operation = "";
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SubtleVerifyResponse record {|
    boolean valid = false;
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type InvokeServiceRequest record {|
    string id = "";
    InvokeRequest message = {};
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type GetConfigurationResponse record {|
    record {|string key; ConfigurationItem value;|}[] items = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type BulkStateItem record {|
    string key = "";
    byte[] data = [];
    string etag = "";
    string 'error = "";
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SubtleUnwrapKeyResponse record {|
    byte[] plaintext_key = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SubtleEncryptRequest record {|
    string component_name = "";
    byte[] plaintext = [];
    string algorithm = "";
    string key_name = "";
    byte[] nonce = [];
    byte[] associated_data = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type UnsubscribeConfigurationResponse record {|
    boolean ok = false;
    string message = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type RegisteredComponents record {|
    string name = "";
    string 'type = "";
    string 'version = "";
    string[] capabilities = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type DecryptResponse record {|
    StreamPayload payload = {};
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SubtleWrapKeyRequest record {|
    string component_name = "";
    byte[] plaintext_key = [];
    string algorithm = "";
    string key_name = "";
    byte[] nonce = [];
    byte[] associated_data = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SubtleDecryptResponse record {|
    byte[] plaintext = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SubtleUnwrapKeyRequest record {|
    string component_name = "";
    byte[] wrapped_key = [];
    string algorithm = "";
    string key_name = "";
    byte[] nonce = [];
    byte[] tag = [];
    byte[] associated_data = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type QueryStateRequest record {|
    string store_name = "";
    string query = "";
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type InvokeActorResponse record {|
    byte[] data = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type PubsubSubscriptionRules record {|
    PubsubSubscriptionRule[] rules = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type GetSecretResponse record {|
    record {|string key; string value;|}[] data = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type GetActorStateRequest record {|
    string actor_type = "";
    string actor_id = "";
    string key = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type GetStateResponse record {|
    byte[] data = [];
    string etag = "";
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SetMetadataRequest record {|
    string key = "";
    string value = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type EncryptResponse record {|
    StreamPayload payload = {};
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SubtleEncryptResponse record {|
    byte[] ciphertext = [];
    byte[] tag = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type ActiveActorsCount record {|
    string 'type = "";
    int count = 0;
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type TryLockRequest record {|
    string store_name = "";
    string resource_id = "";
    string lock_owner = "";
    int expiry_in_seconds = 0;
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SubtleWrapKeyResponse record {|
    byte[] wrapped_key = [];
    byte[] tag = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type StartWorkflowResponse record {|
    string instance_id = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type AppConnectionProperties record {|
    int port = 0;
    string protocol = "";
    string channel_address = "";
    int max_concurrency = 0;
    AppConnectionHealthProperties health = {};
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SubtleSignRequest record {|
    string component_name = "";
    byte[] digest = [];
    string algorithm = "";
    string key_name = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type GetBulkStateRequest record {|
    string store_name = "";
    string[] keys = [];
    int parallelism = 0;
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type RaiseEventWorkflowRequest record {|
    string instance_id = "";
    string workflow_component = "";
    string event_name = "";
    byte[] event_data = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type QueryStateItem record {|
    string key = "";
    byte[] data = [];
    string etag = "";
    string 'error = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type GetBulkSecretResponse record {|
    record {|string key; SecretResponse value;|}[] data = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type BulkPublishRequestEntry record {|
    string entry_id = "";
    byte[] event = [];
    string content_type = "";
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type MetadataHTTPEndpoint record {|
    string name = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type GetStateRequest record {|
    string store_name = "";
    string key = "";
    StateOptions_StateConsistency consistency;
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SaveStateRequest record {|
    string store_name = "";
    StateItem[] states = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type BulkPublishResponse record {|
    BulkPublishResponseFailedEntry[] failedEntries = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type ExecuteActorStateTransactionRequest record {|
    string actor_type = "";
    string actor_id = "";
    TransactionalActorStateOperation[] operations = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type PublishEventRequest record {|
    string pubsub_name = "";
    string topic = "";
    byte[] data = [];
    string data_content_type = "";
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type InvokeActorRequest record {|
    string actor_type = "";
    string actor_id = "";
    string method = "";
    byte[] data = [];
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type UnregisterActorTimerRequest record {|
    string actor_type = "";
    string actor_id = "";
    string name = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type ExecuteStateTransactionRequest record {|
    string storeName = "";
    TransactionalStateOperation[] operations = [];
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type TerminateWorkflowRequest record {|
    string instance_id = "";
    string workflow_component = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type DecryptRequest record {|
    DecryptRequestOptions options = {};
    StreamPayload payload = {};
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type AppConnectionHealthProperties record {|
    string health_check_path = "";
    string health_probe_interval = "";
    string health_probe_timeout = "";
    int health_threshold = 0;
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type PubsubSubscription record {|
    string pubsub_name = "";
    string topic = "";
    PubsubSubscriptionRules rules = {};
    string dead_letter_topic = "";
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type UnsubscribeConfigurationRequest record {|
    string store_name = "";
    string id = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SubscribeConfigurationRequest record {|
    string store_name = "";
    string[] keys = [];
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type GetConfigurationRequest record {|
    string store_name = "";
    string[] keys = [];
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type UnlockRequest record {|
    string store_name = "";
    string resource_id = "";
    string lock_owner = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type StartWorkflowRequest record {|
    string instance_id = "";
    string workflow_component = "";
    string workflow_name = "";
    byte[] input = [];
    record {|string key; string value;|}[] options = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type GetMetadataResponse record {|
    string id = "";
    ActiveActorsCount[] active_actors_count = [];
    RegisteredComponents[] registered_components = [];
    PubsubSubscription[] subscriptions = [];
    MetadataHTTPEndpoint[] http_endpoints = [];
    AppConnectionProperties app_connection_properties = {};
    string runtime_version = "";
    string[] enabled_features = [];
    record {|string key; string value;|}[] extendedmetadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type DeleteStateRequest record {|
    string store_name = "";
    string key = "";
    Etag etag = {};
    StateOptions options = {};
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type BulkPublishRequest record {|
    string pubsub_name = "";
    string topic = "";
    BulkPublishRequestEntry[] entries = [];
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type PurgeWorkflowRequest record {|
    string instance_id = "";
    string workflow_component = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type UnlockResponse record {|
    UnlockResponse_Status status = SUCCESS;
|};

public enum UnlockResponse_Status {
    SUCCESS, LOCK_DOES_NOT_EXIST, LOCK_BELONGS_TO_OTHERS, INTERNAL_ERROR
}

@protobuf:Descriptor {value: DAPR_DESC}
public type DecryptRequestOptions record {|
    string component_name = "";
    string key_name = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type GetWorkflowRequest record {|
    string instance_id = "";
    string workflow_component = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type RegisterActorTimerRequest record {|
    string actor_type = "";
    string actor_id = "";
    string name = "";
    string due_time = "";
    string period = "";
    string callback = "";
    byte[] data = [];
    string ttl = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SubscribeConfigurationResponse record {|
    string id = "";
    record {|string key; ConfigurationItem value;|}[] items = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type EncryptRequest record {|
    EncryptRequestOptions options = {};
    StreamPayload payload = {};
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type GetSecretRequest record {|
    string store_name = "";
    string key = "";
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type TransactionalStateOperation record {|
    string operationType = "";
    StateItem request = {};
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type PauseWorkflowRequest record {|
    string instance_id = "";
    string workflow_component = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type EncryptRequestOptions record {|
    string component_name = "";
    string key_name = "";
    string key_wrap_algorithm = "";
    string data_encryption_cipher = "";
    boolean omit_decryption_key_name = false;
    string decryption_key_name = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SubtleSignResponse record {|
    byte[] signature = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type UnregisterActorReminderRequest record {|
    string actor_type = "";
    string actor_id = "";
    string name = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SubtleGetKeyResponse record {|
    string name = "";
    string public_key = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type TryLockResponse record {|
    boolean success = false;
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SubtleVerifyRequest record {|
    string component_name = "";
    byte[] digest = [];
    string algorithm = "";
    string key_name = "";
    byte[] signature = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SubtleDecryptRequest record {|
    string component_name = "";
    byte[] ciphertext = [];
    string algorithm = "";
    string key_name = "";
    byte[] nonce = [];
    byte[] tag = [];
    byte[] associated_data = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type QueryStateResponse record {|
    QueryStateItem[] results = [];
    string token = "";
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type RegisterActorReminderRequest record {|
    string actor_type = "";
    string actor_id = "";
    string name = "";
    string due_time = "";
    string period = "";
    byte[] data = [];
    string ttl = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type PubsubSubscriptionRule record {|
    string 'match = "";
    string path = "";
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type GetWorkflowResponse record {|
    string instance_id = "";
    string workflow_name = "";
    time:Utc created_at = [0, 0.0d];
    time:Utc last_updated_at = [0, 0.0d];
    string runtime_status = "";
    record {|string key; string value;|}[] properties = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type TransactionalActorStateOperation record {|
    string operationType = "";
    string key = "";
    'any:Any value = {};
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type DeleteBulkStateRequest record {|
    string store_name = "";
    StateItem[] states = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type SubtleGetKeyRequest record {|
    string component_name = "";
    string name = "";
    SubtleGetKeyRequest_KeyFormat format = PEM;
|};

public enum SubtleGetKeyRequest_KeyFormat {
    PEM, JSON
}

@protobuf:Descriptor {value: DAPR_DESC}
public type GetActorStateResponse record {|
    byte[] data = [];
    record {|string key; string value;|}[] metadata = [];
|};

@protobuf:Descriptor {value: DAPR_DESC}
public type ResumeWorkflowRequest record {|
    string instance_id = "";
    string workflow_component = "";
|};

